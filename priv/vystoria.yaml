openapi: 3.0.0
servers:
  - url: http://ec2-18-231-170-165.sa-east-1.compute.amazonaws.com/api/v1
info:
  description: |
    This is a documentation for Vystoria.
  version: "1.0.0"
  title: Vystoria
tags:
  - name: user
    description: Operations about user
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can be done by any user.
      operationId: createUser
      responses:
        '201':
          description: Successfully create a new user, access your email and verify your account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: bigint
                  first_name:
                    type: string
                    format: character varying(255)
                  last_name:
                    type: string
                    format: character varying(255)
                  is_active:
                    type: boolean        
                  is_push_notifications_activated:
                    type: boolean        
                  is_email_notifications_activated:
                    type: boolean
                  email:
                    type: string
                    format: character varying(255)
        '422':
          description: Unprocessable Entity.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors: 
                    type: object
                    properties:
                      field_name:
                        type: array
                        items:
                          type: string
                          example: field error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  format: character varying(255)
                last_name:
                  type: string
                  format: character varying(255)
                is_active:
                  type: boolean        
                is_push_notifications_activated:
                  type: boolean        
                is_email_notifications_activated:
                  type: boolean
                email:
                  type: string
                  format: character varying(255)
                password:
                  type: string
                  format: character varying(255)
                  description: used only on register
        description: Created user object
        required: true
  # /user/createWithArray:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     operationId: createUsersWithArrayInput
  #     responses:
  #       default:
  #         description: successful operation
  #     requestBody:
  #       $ref: '#/components/requestBodies/UserArray'
  # /user/createWithList:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     operationId: createUsersWithListInput
  #     responses:
  #       default:
  #         description: successful operation
  #     requestBody:
  #       $ref: '#/components/requestBodies/UserArray'
  # /user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: true
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #           application/xml:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     operationId: logoutUser
  #     responses:
  #       default:
  #         description: successful operation
  # '/user/{username}':
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     operationId: getUserByName
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be fetched. Use user1 for testing.
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Updated user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be updated
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid user supplied
  #       '404':
  #         description: User not found
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #       description: Updated user object
  #       required: true
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: bigint
        first_name:
          type: string
          format: character varying(255)
        last_name:
          type: string
          format: character varying(255)
        is_active:
          type: boolean        
        is_push_notifications_activated:
          type: boolean        
        is_email_notifications_activated:
          type: boolean
        email:
          type: string
          format: character varying(255)
        password:
          type: string
          format: character varying(255)
          description: used only on register        
        password_hash:
          type: string
          format: character varying(255)
          description: visible only for application
        inserted_at:
          type: string
          format: timestamp
        updated_at:
          type: string
          format: timestamp
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true